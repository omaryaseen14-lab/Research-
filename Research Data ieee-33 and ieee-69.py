
##############################################################################
#                                1) SETUP
##############################################################################

# Seeds for reproducibility. Remove or alter for varied runs.
random.seed(42)
np.random.seed(42)

def get_ieee33_data():
    """
    Returns IEEE-33 bus load data and branch data:
      - load_data: [bus, P(MW), Q(Mvar)]
      - branch_data: [from_bus, to_bus, R(Ohm), X(Ohm)]
    """
    load_data = [
        [1, 0.000, 0.000],
        [2, 0.100, 0.060],
        [3, 0.090, 0.040],
        [4, 0.120, 0.080],
        [5, 0.060, 0.030],
        [6, 0.060, 0.020],
        [7, 0.200, 0.100],
        [8, 0.200, 0.100],
        [9, 0.060, 0.020],
        [10, 0.060, 0.020],
        [11, 0.045, 0.030],
        [12, 0.060, 0.035],
        [13, 0.060, 0.035],
        [14, 0.120, 0.080],
        [15, 0.060, 0.010],
        [16, 0.060, 0.020],
        [17, 0.060, 0.020],
        [18, 0.090, 0.040],
        [19, 0.090, 0.040],
        [20, 0.090, 0.040],
        [21, 0.090, 0.040],
        [22, 0.090, 0.040],
        [23, 0.090, 0.050],
        [24, 0.420, 0.200],
        [25, 0.420, 0.200],
        [26, 0.060, 0.025],
        [27, 0.060, 0.025],
        [28, 0.060, 0.020],
        [29, 0.120, 0.070],
        [30, 0.200, 0.600],
        [31, 0.150, 0.070],
        [32, 0.210, 0.100],
        [33, 0.060, 0.040],
    ]

    branch_data = [
        [1, 2, 0.0922, 0.0470],
        [2, 3, 0.4930, 0.2511],
        [3, 4, 0.3660, 0.1864],
        [4, 5, 0.3811, 0.1941],
        [5, 6, 0.8190, 0.7070],
        [6, 7, 0.1872, 0.6188],
        [7, 8, 0.7114, 0.2351],
        [8, 9, 1.0300, 0.7400],
        [9, 10, 1.0440, 0.7400],
        [10, 11, 0.1966, 0.0650],
        [11, 12, 0.3744, 0.1238],
        [12, 13, 1.4680, 1.1550],
        [13, 14, 0.5416, 0.7129],
        [14, 15, 0.5910, 0.5260],
        [15, 16, 0.7463, 0.5450],
        [16, 17, 1.2890, 1.7210],
        [17, 18, 0.7320, 0.5740],
        [2, 19, 0.1640, 0.1565],
        [19, 20, 1.5042, 1.3554],
        [20, 21, 0.4095, 0.4784],
        [21, 22, 0.7089, 0.9373],
        [3, 23, 0.4512, 0.3083],
        [23, 24, 0.8980, 0.7091],
        [24, 25, 0.8960, 0.7011],
        [6, 26, 0.2030, 0.1034],
        [26, 27, 0.2842, 0.1447],
        [27, 28, 1.0590, 0.9337],
        [28, 29, 0.8042, 0.7006],
        [29, 30, 0.5075, 0.2585],
        [30, 31, 0.9744, 0.9630],
        [31, 32, 0.3105, 0.3619],
        [32, 33, 0.3410, 0.5302],
    ]
    return load_data, branch_data

##############################################################################
#                      1.1) BUILD 24H VARIABLE LOAD DATA
##############################################################################

def build_24h_variable_load_data(base_load_data,
                                 min_factor=0.5,
                                 max_factor=1.2):
    """
    Creates a list of 24 distinct load profiles for the IEEE-33 system,
    by applying random scale factors per bus *per hour*.

    You can replace this logic with a custom approach if you have
    actual hour-by-hour data for each bus.

    Returns:
      A list of length 24. Each element is a 'load_data'-style list:
         [[bus, P(MW), Q(Mvar)], ..., [bus, P(MW), Q(Mvar)]]
    """
    hour_data_list = []

    for hr in range(24):
        # For each hour, create the bus loads
        this_hour_data = []
        for [bus, p_mw, q_mvar] in base_load_data:
            # random scale factors for demonstration
            rand_p = random.uniform(min_factor, max_factor)
            rand_q = random.uniform(min_factor, max_factor)

            new_p = p_mw * rand_p
            new_q = q_mvar * rand_q
            this_hour_data.append([bus, new_p, new_q])
        hour_data_list.append(this_hour_data)

    return hour_data_list

##############################################################################
#                         2) BUILD NETWORK MAPS
##############################################################################

def build_load_map_pu(load_data, load_growth_factor=1.0):
    """
    Convert P(MW), Q(Mvar) => p.u. for S_base=100 MVA => 1 p.u.=100 MW.
    Returns dict {bus: [p_pu, q_pu]} for 33 buses.
    """
    load_map = {}
    for row in load_data:
        bus, p_mw, q_mvar = row
        p_mw_grown = p_mw * load_growth_factor
        q_mvar_grown = q_mvar * load_growth_factor
        p_pu = p_mw_grown / 100.0
        q_pu = q_mvar_grown / 100.0
        load_map[bus] = [p_pu, q_pu]
    return load_map

def build_network_maps(branch_data):
    """
    Returns branch_map, children_dict, parent_dict for radial BFS.
    """
    V_base_kV = 12.66
    S_base_MVA = 100.0
    ohms_to_pu_factor = S_base_MVA/(V_base_kV**2)

    branch_map = {}
    children_dict = {i: [] for i in range(1,34)}
    parent_dict = {i: None for i in range(1,34)}

    for fb, tb, r_ohm, x_ohm in branch_data:
        r_pu = r_ohm * ohms_to_pu_factor
        x_pu = x_ohm * ohms_to_pu_factor
        branch_map[(fb,tb)] = (r_pu, x_pu)
        parent_dict[tb] = fb
        children_dict[fb].append(tb)

    return branch_map, children_dict, parent_dict



##############################################################################
#                          1) IEEE-69 SETUP
##############################################################################

baseMVA     = 10.0
V_base_kV   = 12.66
V_base      = V_base_kV * 1e3
S_base_VA   = baseMVA * 1e6
Z_base      = (V_base**2)/S_base_VA
print(f"Z_base = {Z_base:.4f} ohms (IEEE-69)\n")

# ------------------ Full IEEE-69 Bus Data (69 rows) ------------------
bus_data = [
 [1, 3,   0.0,    0.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [2, 1,   0.0,    0.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [3, 1,   0.0,    0.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [4, 1,   0.0,    0.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [5, 1,   0.0,    0.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [6, 1,   2.6,    2.2,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [7, 1,   40.4,   30.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [8, 1,   75.0,   54.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [9, 1,   30.0,   22.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [10,1,   28.0,   19.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [11,1,  145.0,  104.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [12,1,  145.0,  104.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [13,1,    8.0,    5.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [14,1,    8.0,    5.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [15,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [16,1,   45.5,   30.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [17,1,   60.0,   35.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [18,1,   60.0,   35.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [19,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [20,1,    1.0,    0.6,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [21,1,  114.0,   81.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [22,1,    5.3,    3.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [23,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [24,1,   28.0,   20.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [25,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [26,1,   14.0,   10.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [27,1,   14.0,   10.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [28,1,   26.0,   18.6,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [29,1,   26.0,   18.6,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [30,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [31,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [32,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [33,1,   14.0,   10.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [34,1,   19.5,   14.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [35,1,    6.0,    4.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [36,1,   26.0,   18.6,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [37,1,   26.0,   18.6,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [38,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [39,1,   24.0,   17.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [40,1,   24.0,   17.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [41,1,    1.2,    1.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [42,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [43,1,    6.0,    4.3,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [44,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [45,1,   39.2,   26.3,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [46,1,   39.2,   26.3,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [47,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [48,1,   79.0,   56.4,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [49,1,  384.7,  274.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [50,1,  384.7,  274.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [51,1,   40.5,   28.3,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [52,1,    3.6,    2.7,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [53,1,    4.3,    3.5,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [54,1,   26.4,   19.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [55,1,   24.0,   17.2,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [56,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [57,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [58,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [59,1,  100.0,   72.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [60,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [61,1, 1244.0, 888.0,   0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [62,1,   32.0,   23.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [63,1,    0.0,    0.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [64,1,  227.0,  162.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [65,1,   59.0,   42.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [66,1,   18.0,   13.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [67,1,   18.0,   13.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [68,1,   28.0,   20.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
 [69,1,   28.0,   20.0,  0,0,1,1.0,0.0, V_base_kV,1,1.1,0.9],
]

# ------------------ IEEE-69 Branch Data (69 lines) ------------------
branch_data = [
 [1,2,  0.0005,0.0012],
 [2,3,  0.0005,0.0012],
 [3,4,  0.0015,0.0036],
 [4,5,  0.0251,0.0294],
 [5,6,  0.3660,0.1864],
 [6,7,  0.3810,0.1941],
 [7,8,  0.0922,0.0470],
 [8,9,  0.0493,0.0251],
 [9,10, 0.8190,0.2707],
 [10,11,0.1872,0.0619],
 [11,12,0.7114,0.2351],
 [12,13,1.0300,0.3400],
 [13,14,1.0440,0.3400],
 [14,15,1.0580,0.3496],
 [15,16,0.1966,0.0650],
 [16,17,0.3744,0.1238],
 [17,18,0.0047,0.0016],
 [18,19,0.3276,0.1083],
 [19,20,0.2106,0.0690],
 [20,21,0.3416,0.1129],
 [21,22,0.0140,0.0046],
 [22,23,0.1591,0.0526],
 [23,24,0.3463,0.1145],
 [24,25,0.7488,0.2475],
 [25,26,0.3089,0.1021],
 [26,27,0.1732,0.0572],
 [3,28,  0.0044,0.0108],
 [28,29, 0.0640,0.1565],
 [29,30, 0.3978,0.1315],
 [30,31, 0.0702,0.0232],
 [31,32, 0.3510,0.1160],
 [32,33, 0.8390,0.2816],
 [33,34, 1.7080,0.5646],
 [34,35, 1.4740,0.4873],
 [3,36,  0.0044,0.0108],
 [36,37, 0.0640,0.1565],
 [37,38, 0.1053,0.1230],
 [38,39, 0.0304,0.0355],
 [39,40, 0.0018,0.0021],
 [40,41, 0.7283,0.8509],
 [41,42, 0.3100,0.3623],
 [42,43, 0.0410,0.0478],
 [43,44, 0.0092,0.0116],
 [44,45, 0.1089,0.1373],
 [45,46, 0.0009,0.0012],
 [4,47,  0.0034,0.0084],
 [47,48, 0.0851,0.2083],
 [48,49, 0.2898,0.7091],
 [49,50, 0.0822,0.2011],
 [8,51,  0.0928,0.0473],
 [51,52, 0.3319,0.1140],
 [9,53,  0.1740,0.0886],
 [53,54, 0.2030,0.1034],
 [54,55, 0.2842,0.1447],
 [55,56, 0.2813,0.1433],
 [56,57, 1.5900,0.5337],
 [57,58, 0.7837,0.2630],
 [58,59, 0.3042,0.1006],
 [59,60, 0.3861,0.1172],
 [60,61, 0.5075,0.2585],
 [61,62, 0.0974,0.0496],
 [62,63, 0.1450,0.0738],
 [63,64, 0.7105,0.3619],
 [64,65, 1.0410,0.5302],
 [11,66,0.2012,0.0611],
 [66,67,0.0047,0.0014],
 [12,68,0.7394,0.2444],
 [68,69,0.0047,0.0016],
]

# Convert branch R and X to per-unit
for br in branch_data:
    br[2]/= Z_base
    br[3]/= Z_base

n_buses= len(bus_data)

# Build adjacency to track parent/children for BFS
children_map= {}
parent_of= {}
for i in range(1,n_buses+1):
    children_map[i]= []
for (fb,tb,r_,x_) in branch_data:
    children_map[fb].append(tb)
    parent_of[tb]= fb

# BFS levels
levels= {1:0}
q_= deque([1])
while q_:
    node= q_.popleft()
    for child in children_map[node]:
        levels[child]= levels[node]+1
        q_.append(child)
